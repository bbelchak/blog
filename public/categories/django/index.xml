<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on belchak.com</title>
    <link>https://belchak.com/categories/django/</link>
    <description>Recent content in Django on belchak.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Feb 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://belchak.com/categories/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>unit testing django with a nosql backend</title>
      <link>https://belchak.com/post/2011/02/07/unit-testing-django-with-a-nosql-backend/</link>
      <pubDate>Mon, 07 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://belchak.com/post/2011/02/07/unit-testing-django-with-a-nosql-backend/</guid>
      <description>In my previous post aboutÂ unit testing for django, I laid the groundwork for how to unit test any django application. One nice feature that django includes with its test framework is the test database syncing. Even better is if you are using South to do database migrations - it will run the migrations in your test environment for you.
However, what if you are using a NoSQL database backend like MongoDB, Cassandra, CouchDB or something similar and you aren&amp;rsquo;t using the Django ORM?</description>
    </item>
    
    <item>
      <title>unit testing your django application</title>
      <link>https://belchak.com/post/2011/02/05/unit-testing-your-django-application/</link>
      <pubDate>Sat, 05 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://belchak.com/post/2011/02/05/unit-testing-your-django-application/</guid>
      <description>Unit testing is a very important part of any software project. It helps you know that the new code you are deploying works, and isn&amp;rsquo;t going to blow up in your face. It also helps you feel good about changing large chunks of code without destroying everything you&amp;rsquo;ve done for the last 3 years.
Unit testing with django is as simple as pie. The documentation is very good, and you can learn a lot about more advanced testing methods from the python documentation.</description>
    </item>
    
    <item>
      <title>code completion for python and django in vim</title>
      <link>https://belchak.com/post/2011/01/31/code-completion-for-python-and-django-in-vim/</link>
      <pubDate>Mon, 31 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://belchak.com/post/2011/01/31/code-completion-for-python-and-django-in-vim/</guid>
      <description>VIM has been my editor of choice for at least 15 years. I love how fast I can edit files, perform menial tasks, and wreak general havoc on any code project I am working on at any given moment. One of the things that I have missed about VIM from an IDE perspective has been code completion (a.k.a. &amp;ldquo;IntelliSense&amp;rdquo;). I have spent a lot of time on websites and man pages trying to figure out syntax and function names for several types of languages, and just recently discovered a long-included feature of VIM called omni completion, or Omnicomplete.</description>
    </item>
    
    <item>
      <title>django database migrations with south</title>
      <link>https://belchak.com/post/2011/01/27/django-database-migrations-with-south/</link>
      <pubDate>Thu, 27 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://belchak.com/post/2011/01/27/django-database-migrations-with-south/</guid>
      <description>I have been using django for web development for almost a year now, and I just recently started using South to do database migrations. To be fair, most of the work that I have been doing with databases has centered around MongoDB and schema-less document stores instead of a traditional RDBMS. Since Django does not come with any database migration tools, my standard approach was to make sure that my models are completely thought out before running the manage.</description>
    </item>
    
  </channel>
</rss>